/*
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.template.soy;

import com.google.template.soy.data.SoyValue;
import com.google.template.soy.plugin.java.restricted.JavaValueFactory;
import java.lang.reflect.Method;

@SuppressWarnings("unused") // used by generated bytecode
public final class IntegrationTestRuntime {
  private IntegrationTestRuntime() {}

  static final Method METHOD =
      JavaValueFactory.createMethod(IntegrationTestRuntime.class, "method", SoyValue.class);

  static final Method RETURN_STRING =
      JavaValueFactory.createMethod(IntegrationTestRuntime.class, "returnString");

  static final Method RETURN_ITERABLE =
      JavaValueFactory.createMethod(IntegrationTestRuntime.class, "returnIterable");

  static final Method ACCEPTS_INT =
      JavaValueFactory.createMethod(IntegrationTestRuntime.class, "acceptsInt", int.class);

  static final Method RETURN_ITERABLE_AND_ACCEPT_INT =
      JavaValueFactory.createMethod(
          IntegrationTestRuntime.class, "returnIterableAndAcceptInt", int.class);

  public static final SoyValue method(SoyValue unused) {
    throw new IllegalStateException("shouldn't call this.");
  }

  public static String returnString() {
    throw new IllegalStateException("shouldn't call this.");
  }

  public static Iterable<?> returnIterable() {
    throw new IllegalStateException("shouldn't call this.");
  }

  public static int acceptsInt(int x) {
    throw new IllegalStateException("shouldn't call this.");
  }

  public static final Iterable<?> returnIterableAndAcceptInt(int x) {
    throw new IllegalStateException("shouldn't call this.");
  }
}
