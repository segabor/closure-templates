// This file is a serialized dual of c.g.template.soy.soytree.TemplateMetadata
//
// This represents just enough information to accurately reconstruct those
// objects for dependency templates.  While convenient, we should avoid adding
// additional data to these protos that is not needed for compilation.  Consider
// adding more alternate files (like css_metadata.proto) in order to preserve
// this feature.
//
// This represents a non-stable compiler internal interface.  Users should not
// rely on these objects to be stable between compiler releases.
syntax = "proto3";

package soy.compiler;

option java_package = "com.google.template.soy.soytree";
option java_outer_classname = "TemplateMetadataProto";
option java_multiple_files = true;

// Represents a set of files
message CompilationUnit {
  repeated SoyFileP file = 1;
}

// Represents a soy file
// File global information should be represented here to avoid duplicating data
// across each template.
message SoyFileP {
  // The original file path for the soy file.
  string file_path = 1;
  // The delpackage of the file, or "" if there was no delpackage
  string delpackage = 2;
  // The namespace of the file
  string namespace = 3;
  // The templates in the file
  repeated TemplateMetadataP template = 4;
  reserved 5;
}

// A soy type
message SoyTypeP {
  // a simple type
  enum PrimitiveTypeP {
    UNKNOWN_PRIMITIVE_TYPE = 0;
    ANY = 1;
    UNKNOWN = 2;
    NULL = 3;
    BOOL = 4;
    INT = 5;
    FLOAT = 6;
    STRING = 7;
    HTML = 8;
    ATTRIBUTES = 9;
    JS = 10;
    CSS = 11;
    URI = 12;
    TRUSTED_RESOURCE_URI = 13;
    VE_DATA = 14;
  }
  message RecordTypeP {
    map<string, SoyTypeP> field = 1;
  }
  message LegacyObjectMapTypeP {
    SoyTypeP key = 1;
    SoyTypeP value = 2;
  }
  message MapTypeP {
    SoyTypeP key = 1;
    SoyTypeP value = 2;
  }
  message UnionTypeP {
    repeated SoyTypeP member = 1;
  }
  // discriminated union of the different type categories
  oneof TypeKind {
    PrimitiveTypeP primitive = 1;
    SoyTypeP list_element = 2;
    RecordTypeP record = 3;
    LegacyObjectMapTypeP legacy_object_map = 4;
    MapTypeP map = 5;
    string proto = 6;
    string proto_enum = 7;
    UnionTypeP union = 8;
    string ve = 9;
  }
}

// A single declared template parameter
message ParameterP {
  // The parameter name
  string name = 1;
  // The type of the parameter.
  SoyTypeP type = 2;
  // Whether or not the parameter is required.
  bool required = 3;
}

// Represents a call within a template.
message DataAllCallSituationP {
  // The template name.
  // if this is a delcall or a call to a template in another file, this will be
  // fully qualified.  If it is a call to a template in the current namespace
  // it will be prefixed with a single dot.
  string template_name = 1;
  // Whether this is a delcall
  bool del_call = 2;
  // The names of the explicitly passed parameters.
  repeated string explicitly_passed_parameters = 3;
}

// A duplicate of SanitizedContentKind
enum SanitizedContentKindP {
  UNKNOWN_SANITIZED_CONTENT_KIND = 0;
  HTML = 1;
  JS = 2;
  URI = 3;
  TRUSTED_RESOURCE_URI = 4;
  ATTRIBUTES = 5;
  CSS = 6;
  TEXT = 7;
  NONE = 8;
}
// The kind of the template.
enum TemplateKindP {
  UNKNOWN_TEMPLATE_KIND = 0;
  BASIC = 1;
  ELEMENT = 2;
  DELTEMPLATE = 3;
}

// The visibility of the template.
enum VisibilityP {
  UNKNOWN_VISIBILITY = 0;
  PUBLIC = 1;
  PRIVATE = 2;
}

// Metadata around whether the template contains fragments, html elements
// or velog.
message HtmlElementMetadataP {
  // If this is true, then the template contains either one visible HTML
  // tag, or does a call that resolves to one HTML tag. If false, then
  // there is a fragment. This is also false if the HTML element has dynamic
  // number of tags due to if or switch statements.
  bool is_html_element = 1;
  // If this is true, then the single element has a velog around it. This is
  // to prevent wrapping a velog around a call that is itself velogged.
  bool is_velogged = 2;
  // The tag of an element. If the template is a fragment or a template
  // contains a dynamic tag, then this will be "?".
  string tag = 3;
}

// Metadata around whether the template is a Soy element or not.
message SoyElementMetadataP {
  bool is_soy_element = 1;
}

// Represents a soy template.
message TemplateMetadataP {
  TemplateKindP template_kind = 1;
  // The template name.
  // For basic templates or elements this will be a partial name
  // For deltemplates it will be the fully qualified deltemplate name.
  string template_name = 2;

  // The variant string.  Will be empty for basic templates or deltemplates with
  // no variant.
  string del_template_variant = 3;
  SanitizedContentKindP content_kind = 4;
  bool strict_html = 5;
  VisibilityP visibility = 6;
  repeated ParameterP parameter = 7;
  repeated DataAllCallSituationP data_all_call_situation = 8;

  HtmlElementMetadataP html_element = 11;
  SoyElementMetadataP soy_element = 12;

  reserved 9, 10;
}
